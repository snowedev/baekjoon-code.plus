# 브루트 포스로도 풀 수 있지만 다이나믹이 더 빠름
# 스티커 # B_9465

"""
스티커를 뜯을 수 있는 방법
D[i][j] = 2xi에서 얻을 수 있는 최대 점수, i번 열에서 뜯는 스티커는j

1. 뜯지 않는 방법(j=0) -> (i-1번 열에서는 1,2,3번 경우 다 가능)
D[i][0] = max(D[i-1][0], D[i-1][1], D[i-1][2])

2. 위쪽을 뜯는 것(j=1) -> (위쪽 스티커는 뜯으면 안된다.)
D[i][1] = max(D[i-1][0], D[i-1][2]) + A[i][0](위쪽 스티커의 점수)

3. 아래쪽을 뜯는 것(J=2) -> (i-1번 열에서는 아래쪽 스티커는 뜯으면 안된다.)
D[i][2] = max(D[i-1][0], D[i-1][1]) + A[i][1](아래쪽 스티커의 점수)

답은? : D[n][0,1,2] 중 최댓 값
"""

t = int(input())
for _ in range(t):
    n = int(input())
    t1 = [0] + list(map(int, input().split()))
    t2 = [0] + list(map(int, input().split()))
    """
    t1 = [50, 10, 100, 20, 40]
    t2 = [30, 50, 70, 10, 60]
    [(0, 0), (50, 30), (10, 50), (100, 70), (20, 10), (40, 60)]
    """
    a = list(zip(t1, t2))
    d = [[0]*3 for _ in range(n+1)]
    for i in range(1, n+1):
        d[i][0] = max(d[i-1])
        d[i][1] = max(d[i-1][0], d[i-1][2])+a[i][0]
        d[i][2] = max(d[i-1][0], d[i-1][1])+a[i][1]
    ans = max(d[n])
    print(ans)